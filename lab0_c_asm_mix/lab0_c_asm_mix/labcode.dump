
labcode:     file format elf32-littleriscv
labcode
architecture: riscv:rv32, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000000

Program Header:
    LOAD off    0x00000060 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000500 memsz 0x00000500 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000060  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000100  00000400  00000400  00000460  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  2 .riscv.attributes 0000001c  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  3 .comment      00000012  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .debug_line   00000211  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000115  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000000ac  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000040  00000000  00000000  00000960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    000000ef  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00000028  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00000030  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_frame  00000020  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000400 l    d  .data	00000000 .data
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 lab0.o
00000400 l       .data	00000000 Input_data
00000480 l       .data	00000000 Output_data
00000024 l       .text	00000000 out_loop
00000034 l       .text	00000000 in_loop
00000074 l       .text	00000000 copy
00000044 l       .text	00000000 main
00000064 l       .text	00000000 no_swap
00000080 l       .text	00000000 exit
00000000 l    df *ABS*	00000000 SevenSeg.c
00000000 g       .text	00000000 __start
0000008c g     F .text	0000002c compare



Disassembly of section .text:

00000000 <__start>:
.align 4

__start:

#input data to t0 reg
la t0, Input_data
   0:	40000293          	li	t0,1024
#output data to t1 reg
la t1, Output_data
   4:	48000313          	li	t1,1152

#a2 = loop index 1(~31)
li a2, 0
   8:	00000613          	li	a2,0
#a3 = loop index 2(~31-a2)
li a3, 0
   c:	00000693          	li	a3,0

## define temp registers
# temp2 for loop index 1 exit out_loop
li t2, 31
  10:	01f00393          	li	t2,31
# temp3 for loop index 2 exit in_loop
li t3, 0
  14:	00000e13          	li	t3,0
# temp4 for loop index 2 exit in_loop
li t4, 31
  18:	01f00e93          	li	t4,31

# load 1st value of input data to a0 register 
lw a0, 0(t0)
  1c:	0002a503          	lw	a0,0(t0)
# load 2nd value of input data to a1 register
lw a1, 4(t0)
  20:	0042a583          	lw	a1,4(t0)

00000024 <out_loop>:
# outer loop(0 ~ 31)
# for(a2 = 0, a2 < 31(t2), a2++)
out_loop:
	
	## call 'in_loop' function until t2 < 0
	blt a2, t2, in_loop
  24:	00764863          	blt	a2,t2,34 <in_loop>

	## call 'copy' function if a2 = t2
	beq a2, t2, copy
  28:	04760663          	beq	a2,t2,74 <copy>

	#increment loop index1(a2) by 1
	addi a2, a2, 1
  2c:	00160613          	addi	a2,a2,1

j out_loop
  30:	ff5ff06f          	j	24 <out_loop>

00000034 <in_loop>:
# inner loop(0 ~ (31 - a2))
# for(a3 = 0, a3 < (31 - a2), a3++)
in_loop:

	# calculate(31 - a2)
	sub t3, t4, a2   
  34:	40ce8e33          	sub	t3,t4,a2
	## if a3 < t3(31-a2) go 'main' function
	blt a3, t3, main 
  38:	01c6c663          	blt	a3,t3,44 <main>

	#increment loop index2(a3) by 1
	addi a3, a3, 1
  3c:	00168693          	addi	a3,a3,1

j in_loop
  40:	ff5ff06f          	j	34 <in_loop>

00000044 <main>:
# main function
## if a0 > a1 swap  
main:

	## if a1 is bigger or equal a1, run 'no_swap' function
	bge a1, a0, no_swap
  44:	02a5d063          	bge	a1,a0,64 <no_swap>

	## else swap variables
	## t4 = temp value for swap	
	# store a0 to temp value  
	mv t4, a0
  48:	00050e93          	mv	t4,a0
	# store a1 to a0 reg
	mv a0, a1
  4c:	00058513          	mv	a0,a1
	# store temp to a1 reg
	mv a1, t4
  50:	000e8593          	mv	a1,t4

	# load next word( to a0
	addi a0, a0, 4
  54:	00450513          	addi	a0,a0,4
	# load next word to a0
	addi a1, a1, 4
  58:	00458593          	addi	a1,a1,4

	# call out_loop 
	jal ra, out_loop
  5c:	fc9ff0ef          	jal	ra,24 <out_loop>

j main
  60:	fe5ff06f          	j	44 <main>

00000064 <no_swap>:

# function no_swap
no_swap:

	# just load next word 
	addi a0, a0, 4
  64:	00450513          	addi	a0,a0,4
	addi a1, a1, 4
  68:	00458593          	addi	a1,a1,4

	# call out_loop
	jal ra, out_loop
  6c:	fb9ff0ef          	jal	ra,24 <out_loop>

j no_swap
  70:	ff5ff06f          	j	64 <no_swap>

00000074 <copy>:

# data copy from Input_data to Output_data
copy:
	
	# copy word from t0 to t1
	mv t1, t0
  74:	00028313          	mv	t1,t0

	jal ra, exit
  78:	008000ef          	jal	ra,80 <exit>

j copy
  7c:	ff9ff06f          	j	74 <copy>

00000080 <exit>:
	...

0000008c <compare>:
			, -8, -10, -15, 6, -13, -5, 9, 12
			, -11, -14, -6, 11, 5, 7, -2, -12
			};
	*/
	
	for(int i = 0; i < 31; i++)
  8c:	07c50613          	addi	a2,a0,124
{
  90:	00050793          	mv	a5,a0
	{
		for(int j = 0; j< 31-i; j++)
		{
			tmp = arr[j];
  94:	0007a683          	lw	a3,0(a5)
			arr[j] = arr[j+1];
  98:	0047a703          	lw	a4,4(a5)
		for(int j = 0; j< 31-i; j++)
  9c:	00478793          	addi	a5,a5,4
			arr[j+1] = tmp;	
  a0:	00d7a023          	sw	a3,0(a5)
			arr[j] = arr[j+1];
  a4:	fee7ae23          	sw	a4,-4(a5)
		for(int j = 0; j< 31-i; j++)
  a8:	fec796e3          	bne	a5,a2,94 <compare+0x8>
	for(int i = 0; i < 31; i++)
  ac:	ffc78613          	addi	a2,a5,-4
  b0:	fea610e3          	bne	a2,a0,90 <compare+0x4>
		}
	};
	
}
  b4:	00008067          	ret
